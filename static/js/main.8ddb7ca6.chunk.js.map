{"version":3,"sources":["Table.js","Text.js","App.js","reportWebVitals.js","index.js"],"names":["Table","calories","Fat","Saturated","Cholestrol","Sodium","CH","fiber","protein","VitaD","Calcium","Iron","Pottasium","a_Fat","a_Saturated","a_transFat","a_Cholestrol","a_Sodium","a_CH","a_fiber","a_sugars","a_protein","a_VitaD","a_Calcium","a_Iron","a_Pottasium","className","style","display","borderBottom","marginBottom","colSpan","id","textAlign","Text","input","analyze","reset","removebtn","marginTop","cols","rows","onChange","type","onClick","App","e","setState","textarea","target","value","str","state","url","replace","getData","onReset","clicked","fetch","this","then","resolve","json","data2","totalNutrientsKCal","ENERC_KCAL","quantity","carbs","Math","round","totalDaily","CHOCDF","CHOLE","d_Saturated","FASAT","FAT","FE","NA","VITD","CA","PROCNT","K","a_carbs","totalNutrients","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ddb7ca6.chunk.js","sourcesContent":["import './Table.css';\r\n\r\n\r\nconst Table = ({calories,Fat,Saturated,Cholestrol,Sodium,CH,fiber,protein,VitaD,Calcium,Iron,Pottasium,\r\n    a_Fat,a_Saturated,a_transFat,a_Cholestrol,a_Sodium,a_CH,a_fiber,a_sugars,a_protein,a_VitaD,a_Calcium,a_Iron,a_Pottasium}) => {\r\n    return(\r\n        <div className=\"col-sm-6\">\r\n            <section className=\"box\"> \r\n                <div style={{display:\"-webkit-inline-flex\"}}>\r\n                    <h1 style={{borderBottom:\"10px solid black\"}}>Nutrition Facts</h1>\r\n                </div>\r\n                <table style={{marginBottom:\"20px\"}}>\r\n                    <thead>\r\n                        <tr >\r\n                            <th>Amount per serving</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr style={{borderBottom:\"10px solid black\"}}>\r\n                            <th colSpan=\"2\" id=\"size\" >\r\n                                <b>Calories</b>\r\n                            </th>\r\n                            <td>{calories}</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\",textAlign:'end'}}>\r\n                            <td>% Daily Value*</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">\r\n                                <b>Total Fat</b> {a_Fat}\r\n                            </td>\r\n                            <td>{Fat} %</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">&nbsp; Staurated Fat {a_Saturated}</td>\r\n                            <td>{Saturated} %</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">&nbsp; Trans Fat {a_transFat}</td>\r\n                                <td></td>\r\n                            </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">\r\n                                <b>Cholestrol</b> {a_Cholestrol}\r\n                            </td>\r\n                            <td>{Cholestrol} %</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">\r\n                                    <b>Sodium</b> {a_Sodium}\r\n                                </td>\r\n                                <td>{Sodium} %</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                                <td colSpan=\"2\">\r\n                                    <b>Total Carbohydrate</b> {a_CH}\r\n                                </td>\r\n                                <td>{CH} %</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">&nbsp; Dietary Fiber {a_fiber}</td>\r\n                            <td>{fiber} %</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">&nbsp; Total Sugars {a_sugars}</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">&nbsp; Includes - Added Sugars</td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                                <td colSpan=\"2\">\r\n                                    <b>Protein</b> {a_protein}\r\n                                </td>\r\n                                <td>{protein} %</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">Vitamin D {a_VitaD}</td>\r\n                            <td>{VitaD} %</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">Calcium {a_Calcium}</td>\r\n                            <td>{Calcium} %</td>\r\n                        </tr>\r\n                        <tr style={{borderBottom:\"1px solid black\"}}>\r\n                            <td colSpan=\"2\">Iron {a_Iron}</td>\r\n                            <td>{Iron} %</td>\r\n                        </tr>\r\n                        <tr >\r\n                            <td colSpan=\"2\">Potassium {a_Pottasium}</td>\r\n                            <td>{Pottasium} %</td>\r\n                        </tr>\r\n\r\n                    </tbody>\r\n                </table>\r\n                <div>*Percent Daily Values are based on a 2000 calorie diet</div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import './Text.css';\r\n\r\nconst Text = ({input,analyze,reset,removebtn}) => {\r\n    return(\r\n        <div id=\"main\" className=\"col-sm-4\" style={{marginTop:'20px'}}>\r\n            <p>\r\n                <textarea cols=\"20\" rows=\"10\" className=\"form-control\" onChange={input} ></textarea>\r\n            </p>\r\n            <p className=\"buttons\">\r\n                <button type=\"button\" className=\"btn btn-primary button1\" onClick={analyze}>Analyze</button>\r\n                {removebtn?<button type=\"button\" className=\"btn btn-primary button2\" onClick={reset}>New Recipe</button>:''}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Text;","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport Text from './Text';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nclass App extends Component{\r\n    str;\r\n    url;\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            textarea: '',\r\n            clicked: false,\r\n            calories:'',\r\n            Fat:'',\r\n            Saturated:'',\r\n            Cholestrol:'',\r\n            Sodium:'',\r\n            CH:'',\r\n            fiber:'',\r\n            protein:'',\r\n            VitaD:'',\r\n            Calcium:'',\r\n            Iron:'',\r\n            Pottasium:'',\r\n\r\n            a_Fat:'',\r\n            a_Saturated:'',\r\n            a_Cholestrol:'',\r\n            a_Sodium:'',\r\n            a_CH:'',\r\n            a_fiber:'',\r\n            a_protein:'',\r\n            a_VitaD:'',\r\n            a_Calcium:'',\r\n            a_Iron:'',\r\n            a_Pottasium:'',\r\n \r\n\r\n        }\r\n         }\r\n         input = (e) => {\r\n            this.setState({textarea :e.target.value});\r\n            \r\n            }\r\n            analyze = () => {\r\n                this.setState({reset:true});\r\n                let api = \"https://api.edamam.com/api/nutrition-data?app_id=66aa462e&app_key=013316e63dab26a9ef534ab047776e79&ingr=\";\r\n                this.str= this.state.textarea; \r\n                this.url=api+this.str;\r\n                this.url=this.url.replace(/ /g, '%20');\r\n                this.getData();\r\n\r\n\r\n            }\r\n            onReset = () => {\r\n                this.setState({reset:false});\r\n              }\r\n            getData(){\r\n               \r\n                fetch(this.url)\r\n              .then(resolve =>{\r\n                return resolve.json()\r\n              })\r\n              .then(data2 =>{\r\n                this.setState({calories:data2.totalNutrientsKCal.ENERC_KCAL.quantity});\r\n                this.setState({carbs:Math.round(data2.totalDaily.CHOCDF.quantity)});\r\n                this.setState({Cholestrol:Math.round(data2.totalDaily.CHOLE.quantity)});\r\n                this.setState({d_Saturated:Math.round(data2.totalDaily.FASAT.quantity)});\r\n                this.setState({Fat:Math.round(data2.totalDaily.FAT.quantity)});\r\n                this.setState({Iron:Math.round(data2.totalDaily.FE.quantity)});\r\n                this.setState({Sodium:Math.round(data2.totalDaily.NA.quantity)});\r\n                this.setState({VitaD:Math.round(data2.totalDaily.VITD.quantity)});\r\n                this.setState({Calcium:Math.round(data2.totalDaily.CA.quantity)});\r\n                this.setState({protein:Math.round(data2.totalDaily.PROCNT.quantity)});\r\n                this.setState({Pottasium:Math.round(data2.totalDaily.K.quantity)});\r\n            \r\n                this.setState({a_carbs:Math.round(data2.totalNutrients.CHOCDF.quantity)});\r\n                this.setState({a_Cholestrol:Math.round(data2.totalNutrients.CHOLE.quantity)});\r\n                this.setState({a_Saturated:Math.round(data2.totalNutrients.FASAT.quantity)});\r\n                this.setState({a_Fat:Math.round(data2.totalNutrients.FAT.quantity)});\r\n                this.setState({a_Iron:Math.round(data2.totalNutrients.FE.quantity)});\r\n                this.setState({a_Sodium:Math.round(data2.totalNutrients.NA.quantity)});\r\n                this.setState({a_VitaD:Math.round(data2.totalNutrients.VITD.quantity)});\r\n                this.setState({a_Calcium:Math.round(data2.totalNutrients.CA.quantity)});\r\n                this.setState({a_protein:Math.round(data2.totalNutrients.PROCNT.quantity)});\r\n                this.setState({a_Pottasium:Math.round(data2.totalNutrients.K.quantity)});\r\n            })\r\n        }\r\n        render(){\r\n            return (\r\n                <div>\r\n          \r\n                  <h1 id=\"h1\" style={{textAlign:'center'}}>Nutritional Analysis</h1>\r\n           \r\n                <p id=\"para\"style={{textAlign:'center'}}>Enter an ingredient list list for what you are cooking, like \"1 cup rice, 10 oz chickpeas\", etc.\r\n                    Enter each ingredient on a new line.</p>\r\n              <div className=\"col-md-12\">\r\n              <div style={{display:'flex'}}>\r\n                  <Text input={this.input} analyze={this.analyze} reset={this.onReset} removebtn={this.state.reset}/>\r\n                  {this.state.reset?\r\n                  <Table \r\n                  calories={this.state.calories}\r\n                  Fat={this.state.Fat}\r\n                  Saturated={this.state.Saturated}\r\n                  Cholestrol={this.state.Cholestrol}\r\n                  Sodium={this.state.Sodium}\r\n                  CH={this.state.CH}\r\n                  fiber={this.state.fiber}\r\n                  protein={this.state.protein}\r\n                  VitaD={this.state.VitaD}\r\n                  Calcium={this.state.Calcium}\r\n                  Iron={this.state.Iron}\r\n                  Pottasium={this.state.Pottasium}\r\n        \r\n                  a_Fat={this.state.a_Fat}\r\n                  a_Saturated={this.state.a_Saturated}\r\n                  a_transFat={this.state.a_transFat}\r\n                  a_Cholestrol={this.state.a_Cholestrol}\r\n                  a_Sodium={this.state.a_Sodium}\r\n                  a_CH={this.state.a_CH}\r\n                  a_fiber={this.state.a_fiber}\r\n                  a_sugars={this.state.a_sugars}\r\n                  a_protein={this.state.a_protein}\r\n                  a_VitaD={this.state.a_VitaD}\r\n                  a_Calcium={this.state.a_Calcium}\r\n                  a_Iron={this.state.a_Iron}\r\n                  a_Pottasium={this.state.a_Pottasium}\r\n                  />:''}\r\n              </div>\r\n              </div>\r\n        \r\n              </div>\r\n              \r\n            )\r\n          }\r\n    \r\n         \r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}